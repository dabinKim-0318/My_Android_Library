package designpattern.delegate

/*
Delegate란 한국말로 위임이라는 뜻이다.
우리가 계약서 등을 작성할 때 대리인에게 결정 권한을 위임한다고 하면, 대리인은 우리의 결정 권한을 가지게 된다.
대리인은 우리와 다른 사람임에도 결정 권한이라는 행동에 대해 우리와 똑같이 행동할 수 있게 되는 것이다.
코틀린의 Delegate Pattern 또한 같다.
코틀린의 Delegate Pattern은 한 객체에의 함수(행동) 혹은 프로퍼티(속성)의 구현을 다른 객체에 위임한다.
예를 들어 객체1과 객체2가 있다고 해보자. 이러한 객체1의 행동을 객체2에 위임한다고 했을 때 객체2는 객체1의 함수와 프로퍼티를 위임 받는다.
Delegate Pattern은 보일러 플레이트 코드를 줄여준다.
관리 포인트를 일원화시켜 코드 유지보수를 용이하게 해준다. 한곳에서 구현하면 다른 곳에서 위임 받아 사용할 수 있기 때문이다.
*/


//부동산 계약 인터페이스
interface contract {
    fun go()
}

//부동산 계약하는 본인이 부동산 계약 인터페이스 구현해 계약
class me() : contract {
    override fun go() {
        println("계약되었습니다")
    }
}

//중계인은 me에게 위임받아야 부동산 계약이 가능
class hi() {
    val me2 = me()
}

class dari : contract by hi().me2 // 나의 계약하기 fun이 부동산 중개인에게 위임됨
class honey : contract by hi().me2


/*부동산계약의 위임자는 다음과 같이 배우자가 될 수도 있고 부모님이 될 수도 있고 임의의 사람이 될 수도 있다.
이러한 경우에 각각 부동산 계약과 관련된 메서드를 구현하는 것보다 아래와 같이 본인 객체를 만들어놓고 계약 권한을 위임하는 것이 코드 유지보수에 용이하다.*/
fun main() {
    dari().go() // 계약되었습니다.
    honey().go() // 계약되었습니다.
}